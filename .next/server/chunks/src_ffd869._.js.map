{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\"\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;;;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,uDAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/api/auth/signup/route.ts"],"sourcesContent":["import { prisma } from \"@/lib/prisma\"\nimport { hash } from \"bcryptjs\"\nimport { NextResponse } from \"next/server\"\n\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json()\n    console.log('API received:', body)\n    \n    const { name, email, password } = body\n    \n    if (!name || !email || !password) {\n      return NextResponse.json(\n        { error: \"Missing required fields\" },\n        { status: 400 }\n      )\n    }\n    \n    // Log before database operations\n    console.log('Checking for existing host')\n    const existingHost = await prisma.host.findUnique({\n      where: { email }\n    })\n    \n    if (existingHost) {\n      return NextResponse.json(\n        { error: \"Email already exists\" },\n        { status: 400 }\n      )\n    }\n    \n    console.log('Creating new host')\n    const hashedPassword = await hash(password, 10)\n    await prisma.host.create({\n      data: {\n        name,\n        email,\n        password: hashedPassword\n      }\n    })\n    \n    return NextResponse.json({ message: \"Host created successfully\" })\n  } catch (error) {\n    console.error('API Error:', error)\n    return NextResponse.json(\n      { error: \"Something went wrong\" },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAIO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAElC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,iCAAiC;QACjC,QAAQ,GAAG,CAAC;QACZ,MAAM,eAAe,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC;QACZ,MAAM,iBAAiB,MAAM,CAAA,GAAA,mIAAA,CAAA,OAAI,AAAD,EAAE,UAAU;QAC5C,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvB,MAAM;gBACJ;gBACA;gBACA,UAAU;YACZ;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA4B;IAClE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAuB,GAChC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}